1.设置编码
    Tomcat8之前，设置编码：
        1）get请求方式：
            //get方式下，不需要设置编码（基于Tomcat8）
            //如果是get请求发送的中文数据，转码稍微优点麻烦（tomcat8之前）
            String fname = request.getParameter("fname")
            //1.将字符串打散成字节数组
            byte[] bytes = fname.getBytes("ISO-8859-1");
            //2.将字节数组按照设定的编码重新组装成字符串
            fname = new String(bytes,"utf-8");
        2）post请求方式：
            request.setCharacterEncoding("utf-8");
    Tomcat8开始设置编码，只需要针对post方式：
        quest.setCharacterEncoding("utf-8");
    注意： 需要注意的是，设置编码(post)这一句代码必须在所有获取参数动作之前
2.servlet的继承关系---重点查看的是服务方法（service())
    1、继承关系
    javax.servlet.Servlet接口
        javax.servlet.GenericServlet抽象类
            javax.servlet.http.HttpServlet 抽象子类
    2、相关方法
        javax.servlet.servlet接口：
          void init(config) --初始化方法
          void service(request,response) - 服务方法
          void destory() -销毁方法
        javax.servlet.GenericServlet抽象类：
            void service(request,response) -任然是抽象的
        javax.servlet.http.HttpServlet 抽象子类：
            void service(request,response) -不是抽象的
                1.String method = res.getMethod()； 获取请求的方式（get/post....)
                2.各种if判断，根据请求方式不同，决定去调用不同的do方法
                   if (method.equals("GET")) {
                        this.doGet(req,resp);
                       } else if (method.equals("HEAD")) {
                           this.dohead(req,resp);
                       } else if (method.equals("POST")) {
                           this.doPost(req, resp);
                       } else if (method.equals("PUT")) {
                           this.doPut(req, resp);
                       } else if (method.equals("DELETE")) {
                       } else if (method.equals("OPTIONS"))
                3.在httpServlet这个抽象类中，do方法都差不多：
                protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                        String protocol = req.getProtocol();
                        String msg = lStrings.getString("http.method_get_not_supported");
                        if (protocol.endsWith("1.1")) {
                            resp.sendError(405, msg);
                        } else {
                            resp.sendError(400, msg);
                        }
                    }
    3.小结：
        1）继承关系：HttpServlet -> GenericServlet ->Servlet
        2）Servlet中的核心方法： init(), service(),destroy();
        3）服务方法：当有请求过来时，service方法会自动响应（其实是Tomcat容器调用）
            在HttpServlet中我们会分析请求的方式：到底是get、post、head还是delete等等
            然后再决定调用哪个do开头的方法，
            在HttpServlet中这些do方法默认都是405的实现风格-要我们子类去实现对应的方法，
            否则默认会报405错误
        4）因此，我们在新建Servlet时，我们才会去考虑请求的方式，从而决定重写哪个do方法
3.servlet的声明周期
    1）声明周期：从出生到死亡的过程就是声明周期。对应servlet中的三个方法：init(),service(),destroy()
    2) 默认情况下：
        第一次接受请求时，这个servlet会进行实例化(底层通过反射进行实例化)（调用构造方法），初始化（init()），然后服务(service())
        从第二次请求开始，每次都是服务
        当容器关闭时，其中的所有的Servlet实例会被销毁，调用销毁方法(destroy())
    3)通过案例我们发现：
        - servlet实例，Tomcat只会创建一个，所有的请求都是这一个实例去相应。
        - 默认情况下，第一次请求时Tomcat才会去实例化、初始化、服务.
                    这样的好处? 提高系统的启动速度。
                    缺点： 第一次请求时，耗时较长。
        - 因此得出结论：如果需要提高系统的启动速度，当前默认情况就是这样
                     如果需要提高相应速度，需要设置servlet初始化时机
    4）servlet的初始化时机
        - 默认是第一次接收请求时，实例化，初始化
        - 我们可以通过load-on-startup 来设置servlet启动的先后顺序，数字越小，启动越靠前，最小值0
    5）Servlet在容器中是：单例的、线程不安全的
        - 单例：所有的请求都是同一个实例去响应
        - 线程不安全：一个线程需要根据这个实例中的某个成员变量值去做逻辑判断。
           但是在中间某个时机  ，另一个线程改变了这个成员变量的值，从而导致第一个线程的执行路径发生了变化
        - 我们已经知道了servlet是线程不安全的，给我们的启发是：尽量的不要在servlet中定义成员变量。
            如果不得不定义成员变量，那么：①不去修改成员变量的值
                                     ②不要去根据成员变量的值做一些逻辑判断
4.http协议
    1）http称之为 超文本传输协议
    2）http是无状态的
    3）http请求响应包含两个部分：请求和响应
        -请求：
         请求包含三个部分：1、请求行； 2、请求消息头； 3、请求主体；
            1）请求行包含三个信息：1.请求方式； 2、请求的URL； 3、请求的协议（一般都是HTTP1.1）
            2）请求消息头中包含了很多客户端需要告诉服务器的信息，比如：我的浏览器型号、版本、我能接受的内容的类型、我给你发的内容的类型、内容的长度等等
            3）请求体， 三种情况
                get方式，没有请求体，但是有一个queryString
                post方式，有请求体，form data
                join 格式，有请求体，request payload
         - 响应：
         响应也包含3部分：1.响应行； 2.响应头，3.响应体
            1）响应行，包含3个信息：1.协议（http1.1）；2.响应状态码（200） ；3.响应状态（OK）
            2）响应头
            3）响应体：响应的实际内容（比如请求add.html页面时，响应的内容就是<html><head><body></html>）

5.会话
    1）HTTP是无状态的：
        -HTTP 无状态：服务器无法判断这两次请求是同一个客户端发过来的，还是不同的客户端发过来的
        - 无状态带来的现实问题：第一次请求添加商品到购物车，第二次请求是结账；
                如果这两次请求服务器无法区分是同一个用户的，那么就会导致混乱
        - 通过会话跟踪技术来解决无状态的问题。
    2) 会话跟踪技术
        - 客户端第一次发请求给服务器，服务器获取session，获取不到，则创建新的，然后响应给客户端
        - 下次客户端给服务器发请求时，会把sessionID带给服务器，那么服务器就能获取到了，
            那么服务器就可以判断这一次请求和上一次请求是同一个客户端，从而能区分开客户端
        - 常用API：
            request.getSession() -> 获取当前会话，没有则创建一个新的会话
            request.getSession(true) -> 效果和不带参数相同
            request.getSession(false) ->获取当前会话。没有则返回null，不会创建新的

            session.getId() ->获取sessionID  3FE150D7A96C4FDF8D390A982F44964A
            session.isNew() ->判断当前session是否是新的
            session.getMaxInactiveInterval()  session的非激活间隔时长,默认为1800秒
            session.setMaxInactiveInterval()  修改session的非激活间隔时长
            session.invalidate() ->强制性的让会话立即失效
            session.getCreateTime()
    3) session保存作用域
        - session保存作用域时和具体的某一个session对应的
        - 常用的API：
            void session.setAttribute(k,v)
            Object session.getAttribute(k)
            void session.removeAttribute(k)

6.服务器内部转发以及客户端重定向

    1) 服务器内部转发：request.getRequestDispatcher("...").forward(request,response)
        - 一次请求响应的过程，对于客户端而言内部经过了多少次转发，客户端是不知道的
        - 地址栏没有变化
        - 服务器自己去干，结果返回给客户端
    2) 客户端重定向：response.sendRedirect("...");
        - 二次请求响应的过程，客户端肯定知道请求url的变化
        - 地址栏有变化
        - 服务器告诉客户端去哪里干，让客户端自己去访问
7.Thymeleaf  -视图模板技术
    1) 添加thymeleaf jar包
    2) 新建一个Servlet类ViewBaseServlet
    3) 在web.xml文件中添加配置
        - 配置前缀 view-prefix
        - 配置后缀 view-suffix
    4) 使得我们的Servlet继承ViewBaseServlet

    5) 根据逻辑视图名称得到物理视图名称
        //那么thymeleaf会将这个逻辑视图名称 对应到 物理视图名称上
        //逻辑视图名称： index
        //物理视图名称： view-prefix + 逻辑视图名称 + view-suffix
        //所以真实的视图名称是 /index.html
        super.processTemplate("index",request,response);
    6) 使用thymeleaf 的标签
     th:if , th:unless , th:each , th:text


//500: 服务器内部错误，
//200：正常响应
//405：请求方式不支持
//404：找不到资源
//302：表示重定向